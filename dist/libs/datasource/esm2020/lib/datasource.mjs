import { DataSource } from '@angular/cdk/table';
import { Injectable } from '@angular/core';
import { isEqual } from 'lodash';
import { BehaviorSubject, isObservable, merge, of, Subject, timer, } from 'rxjs';
import { catchError, distinctUntilChanged, filter, map, skipWhile, switchMap, take, takeUntil, tap, throttleTime, } from 'rxjs/operators';
import { defaultConfig } from './datasource-config';
import { MatDataSourceIntl } from './datasource-intl';
import { DataSourceLogger } from './datasource-logger';
import { DataSourceStreamer } from './datasource-streamer';
import { addWhenRunning, disconnecting, emptyMsg, isAutoStarting, notAutoStarting, queryResponse, queryTimeout, removingStream, resolvedArgs, responseError, responseSuccess, responseTotal, rmWhenRunning, srcAdding, srcEmpty, } from './messages';
import * as i0 from "@angular/core";
import * as i1 from "./datasource-intl";
export class MatDataSource extends DataSource {
    /**
     * DataSource.
     */
    constructor(intl) {
        super();
        this.intl = intl;
        /**
         * State to control outside behavior like css classes and components.
         * Updated by pre/postQuery to show/hide the loading overlay and empty message.
         */
        this._reloading = true;
        this._loading = true;
        this._loaded = false;
        this._empty = true;
        this._skip = false;
        this._total = 0;
        this._data = [];
        this._progress = 0;
        this._config = defaultConfig;
        /**
         * Control members for the datasource processing.
         */
        this.defaults = {};
        this.overrides = {};
        /**
         * Error control vars.
         */
        this._logger = new DataSourceLogger(this.constructor.name, this.intl);
        /**
         * Stream only used to trigger a refresh on the data.
         * Can receive some Criteria overrides for a temporary update.
         * It has to be used outside the datasource to prevent infinite loops.
         */
        this._trigger$ = new BehaviorSubject({});
        /** Executions counter */
        this._triggered = 0;
        /** Registered streams */
        this._streams = new DataSourceStreamer(this._logger);
        /** Output Emitter to refresh the UI. */
        this._change$ = new BehaviorSubject({});
        /** Output Emitter of the latest Data. */
        this._data$ = new Subject();
        /** Disconnect internal observable. */
        this._disconnect$ = new Subject();
        // update i18n if present
        if (this.intl) {
            this.config = this.intl;
        }
        // initial config sync
        this._logger.config = this._config;
        // listen the internal trigger
        this.addStream(this._trigger$);
    }
    get isLoading() {
        return this._loading;
    }
    get isLoaded() {
        return this._loaded;
    }
    get isEmpty() {
        return this._empty;
    }
    set skipSave(val) {
        this._skip = !!val;
    }
    /**
     * Number used to calculate the pagination length.
     * Updated after the rawResult method according to the response data.
     */
    get total() {
        return this._total;
    }
    get data() {
        return this._data ? this._data : [];
    }
    /**
     * Number used to calculate the loading progress.
     * Updated while loading the query and triggering change$.
     */
    get progress() {
        return this._progress;
    }
    /**
     * Output message getter.
     */
    get outputMsg() {
        return this._outputMsg;
    }
    /**
     * Accessors
     */
    get args() {
        return this.arguments || {};
    }
    get progressMode() {
        return this._config.progressMode;
    }
    get change$() {
        return this._change$.asObservable();
    }
    get data$() {
        return this._data$.asObservable();
    }
    get hasErrors() {
        return this._logger.hasErrors(true);
    }
    get getErrors() {
        return this._logger.getErrors();
    }
    /**
     * Setters
     */
    // config settings
    get config() {
        return this._config;
    }
    set config(config) {
        this._config = {
            ...this._config,
            ...config,
        };
        this._logger.config = this._config;
    }
    ngOnDestroy() {
        this._logger.print(disconnecting(), '');
        this.disconnect();
    }
    /**
     * Streams
     */
    addArguments(args) {
        this.defaults = { ...this.defaults, ...args };
    }
    addStream(stream) {
        const src = isObservable(stream)
            ? {
                name: this._streams.length.toString(),
                stream,
            }
            : stream;
        this._logger.check(this._triggered, addWhenRunning(src.name || src.stream));
        this._logger.debug(srcAdding(src.name), srcEmpty(src.name), stream);
        return this._streams.add(src);
    }
    remStream(name) {
        this._logger.check(this._triggered, rmWhenRunning(name));
        this._logger.print(removingStream(), name);
        this._streams.remove(name);
    }
    /**
     * Triggers
     */
    refresh(overrides = {}) {
        this.overrides = overrides;
        this._trigger$.next(overrides);
    }
    reload() {
        this._reloading = true;
        this._trigger$.next({ forceReload: new Date().getTime() });
    }
    restart() {
        this._triggered = 0;
    }
    /**
     * Data processing that can be completely customized.
     */
    reqArguments(args) {
        return args;
    }
    rawFilter(result) {
        return true;
    }
    /**
     * Data Fetching Methods
     */
    _blockStart() {
        // check if it's not configured to start after the first trigger
        const block = this._triggered === 1 && !this._config.autoStart;
        if (this._triggered === 1) {
            this._logger.debug(isAutoStarting(), notAutoStarting(this._streams.length), !block);
        }
        if (block) {
            this._loading = false;
        }
        return block;
    }
    _getArgs(output) {
        // merge all the stream outputs
        this.arguments = {
            ...this.defaults,
            ...output,
            ...this.overrides,
        };
        delete this.arguments.forceReload;
        return this.arguments;
    }
    _isEqual() {
        return (prev, curr) => {
            const isDistinct = !this._reloading && isEqual(prev, curr);
            this._logger.print(resolvedArgs(isDistinct), curr);
            return isDistinct;
        };
    }
    _preQuery() {
        // state update
        this._loading = true;
        this._reloading = false;
        this._outputMsg = '';
        this._logger.clearErrors();
        this._change$.next({});
        this.overrides = {};
    }
    _execQuery(args) {
        const query = this.rawFetch(args);
        return merge(query, 
        // timers check
        timer(this.config.waitMs, this.config.intervalMs).pipe(takeUntil(query), take(3) // by default: 5s, 15s, 25s
        )).pipe(
        // delay check
        tap((val) => {
            if (typeof val !== 'number') {
                this._logger.print(queryResponse(), val);
            }
            else {
                this._logger.print(queryTimeout(), val);
                try {
                    this._outputMsg = this._logger.getTimeoutError(val);
                }
                catch (e) {
                    this._logger.addError('timeout', e.message);
                    this._loading = false;
                }
                this._change$.next({});
            }
        }), 
        // discard timer result
        filter((result) => typeof result !== 'number'), catchError((err) => {
            // isolate query error
            this._logger.handleError('query', err);
            return of(this.rawDefault());
        }));
    }
    _updateTotal(res) {
        if (!this.hasErrors) {
            // microtask as workaround for change detection
            this.rawTotal(res)
                .pipe(take(1), tap((total) => this._logger.print(responseTotal(), total)))
                .subscribe((total) => {
                this._total = total;
                this._change$.next({});
            });
        }
    }
    _processException(err) {
        console.error(`${this.constructor.name} Exception`, err);
        return of(false);
    }
    _postQuery(res) {
        const hasErrors = this.hasErrors;
        const data = !hasErrors ? this.rawResult(res) : [];
        this._logger.debug(responseSuccess(data), responseError(this.getErrors), !hasErrors);
        this._empty = !data || !data.length;
        if (!hasErrors && this._empty) {
            this._outputMsg = this._emptyMessage();
        }
        if (!this._skip) {
            this._data = data;
            this._data$.next(data);
        }
        this._loaded = !hasErrors;
        this._loading = false;
        this._skip = false;
        this._change$.next({});
        return data;
    }
    _emptyMessage() {
        if (this.intl?.emptyMsg) {
            if (typeof this.intl.emptyMsg === 'function') {
                return this.intl.emptyMsg(this.args);
            }
            else {
                return this.intl.emptyMsg;
            }
        }
        if (this._config.emptyMsg) {
            if (typeof this._config.emptyMsg === 'function') {
                return this._config.emptyMsg(this.args);
            }
            else {
                return this._config.emptyMsg;
            }
        }
        return emptyMsg();
    }
    /**
     * Data API
     */
    connect() {
        return this._streams.connect().pipe(takeUntil(this._disconnect$), throttleTime(10), tap(() => this._triggered++), skipWhile(() => this._blockStart()), map((args) => this._getArgs(args)), map((req) => this.reqArguments(req)), distinctUntilChanged(this._isEqual()), tap(() => this._preQuery()), switchMap((req) => this._execQuery(req)), takeUntil(this._disconnect$), filter((raw) => this.rawFilter(raw)), tap((raw) => this._updateTotal(raw)), catchError((err) => this._processException(err)), map((raw) => this._postQuery(raw)));
    }
    disconnect() {
        this._trigger$.complete();
        this._change$.complete();
        this._disconnect$.next();
        this._disconnect$.complete();
    }
}
MatDataSource.ɵfac = function MatDataSource_Factory(t) { return new (t || MatDataSource)(i0.ɵɵinject(i1.MatDataSourceIntl)); };
MatDataSource.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: MatDataSource, factory: MatDataSource.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(MatDataSource, [{
        type: Injectable
    }], function () { return [{ type: i1.MatDataSourceIntl }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,