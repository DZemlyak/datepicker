import { map } from 'rxjs/operators';
import { MatDataSource } from './datasource';
import { mapPaginator, mapSort } from './mappers';
import { nonNumeric, setValue } from './messages';
export class ReactiveDataSource extends MatDataSource {
    constructor() {
        super(...arguments);
        this._pageIndex = 0;
        this._pageSize = 10;
    }
    /**
     * Pagination Settings
     */
    get pageIndex() {
        return this._pageIndex;
    }
    set pageIndex(size) {
        this._logger.check(isNaN(Number(size)), nonNumeric('pageIndex'));
        this._logger.print(setValue('PageIndex'), Number(size));
        this._pageIndex = Number(size);
    }
    get pageSize() {
        return this._pageSize;
    }
    set pageSize(size) {
        if (size) {
            this._logger.check(isNaN(Number(size)), nonNumeric('pageSize'));
            this._logger.print(setValue('PageSize'), Number(size));
            this._pageSize = Number(size);
        }
    }
    // be sure the paginator's view has been initialized
    setPaginator(paginator, mapper) {
        this.addStream({
            name: 'MatPaginator',
            stream: paginator.page.pipe(mapper ? mapper(this.pageSize) : mapPaginator(this.pageSize)),
        });
    }
    // sort changes emitted will trigger an update
    setSort(sort, mapper) {
        this.addStream({
            name: 'MatSort',
            stream: sort.sortChange.pipe(mapper ? mapper() : mapSort()),
        });
    }
    /**
     * Attachs an autocompleter with this data source filtered. Note that
     * the stream provided will be accessed during change detection and should not directly change
     * values that are bound in template views.
     * @returns Observable that emits a new value when the data changes.
     */
    attach() {
        return this.connect().pipe(map((res) => this.resFilter(res)));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXNvdXJjZS1yZWFjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvZGF0YXNvdXJjZS9zcmMvbGliL2RhdGFzb3VyY2UtcmVhY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFHbEQsTUFBTSxPQUFnQixrQkFBa0MsU0FBUSxhQUkvRDtJQUpEOztRQWdCVSxlQUFVLEdBQUcsQ0FBQyxDQUFDO1FBWWYsY0FBUyxHQUFHLEVBQUUsQ0FBQztJQTJDekIsQ0FBQztJQWxFQzs7T0FFRztJQUNILElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBQ0QsSUFBSSxTQUFTLENBQUMsSUFBWTtRQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFHRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUNELElBQUksUUFBUSxDQUFDLElBQVk7UUFDdkIsSUFBSSxJQUFJLEVBQUU7WUFDUixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDaEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3ZELElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztJQUdELG9EQUFvRDtJQUNwRCxZQUFZLENBQ1YsU0FBdUIsRUFDdkIsTUFFMEQ7UUFFMUQsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNiLElBQUksRUFBRSxjQUFjO1lBQ3BCLE1BQU0sRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FDekIsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUM3RDtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCw4Q0FBOEM7SUFDOUMsT0FBTyxDQUNMLElBQWEsRUFDYixNQUErRDtRQUUvRCxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2IsSUFBSSxFQUFFLFNBQVM7WUFDZixNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQU0sTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDakUsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsTUFBTTtRQUNKLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7Q0FPRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hdFBhZ2luYXRvciwgUGFnZUV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvcGFnaW5hdG9yJztcclxuaW1wb3J0IHsgTWF0U29ydCwgU29ydCB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NvcnQnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBVbmFyeUZ1bmN0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgTWF0RGF0YVNvdXJjZSB9IGZyb20gJy4vZGF0YXNvdXJjZSc7XHJcbmltcG9ydCB7IG1hcFBhZ2luYXRvciwgbWFwU29ydCB9IGZyb20gJy4vbWFwcGVycyc7XHJcbmltcG9ydCB7IG5vbk51bWVyaWMsIHNldFZhbHVlIH0gZnJvbSAnLi9tZXNzYWdlcyc7XHJcbmltcG9ydCB7IERhdGFTb3VyY2VJdGVtIH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUmVhY3RpdmVEYXRhU291cmNlPFJFUSwgUkFXLCBSRVM+IGV4dGVuZHMgTWF0RGF0YVNvdXJjZTxcclxuICBSRVEsXHJcbiAgUkFXLFxyXG4gIFJFU1xyXG4+IHtcclxuICAvKipcclxuICAgKiBQYWdpbmF0aW9uIFNldHRpbmdzXHJcbiAgICovXHJcbiAgZ2V0IHBhZ2VJbmRleCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9wYWdlSW5kZXg7XHJcbiAgfVxyXG4gIHNldCBwYWdlSW5kZXgoc2l6ZTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLl9sb2dnZXIuY2hlY2soaXNOYU4oTnVtYmVyKHNpemUpKSwgbm9uTnVtZXJpYygncGFnZUluZGV4JykpO1xyXG4gICAgdGhpcy5fbG9nZ2VyLnByaW50KHNldFZhbHVlKCdQYWdlSW5kZXgnKSwgTnVtYmVyKHNpemUpKTtcclxuICAgIHRoaXMuX3BhZ2VJbmRleCA9IE51bWJlcihzaXplKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBfcGFnZUluZGV4ID0gMDtcclxuXHJcbiAgZ2V0IHBhZ2VTaXplKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3BhZ2VTaXplO1xyXG4gIH1cclxuICBzZXQgcGFnZVNpemUoc2l6ZTogbnVtYmVyKSB7XHJcbiAgICBpZiAoc2l6ZSkge1xyXG4gICAgICB0aGlzLl9sb2dnZXIuY2hlY2soaXNOYU4oTnVtYmVyKHNpemUpKSwgbm9uTnVtZXJpYygncGFnZVNpemUnKSk7XHJcbiAgICAgIHRoaXMuX2xvZ2dlci5wcmludChzZXRWYWx1ZSgnUGFnZVNpemUnKSwgTnVtYmVyKHNpemUpKTtcclxuICAgICAgdGhpcy5fcGFnZVNpemUgPSBOdW1iZXIoc2l6ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHByaXZhdGUgX3BhZ2VTaXplID0gMTA7XHJcblxyXG4gIC8vIGJlIHN1cmUgdGhlIHBhZ2luYXRvcidzIHZpZXcgaGFzIGJlZW4gaW5pdGlhbGl6ZWRcclxuICBzZXRQYWdpbmF0b3IoXHJcbiAgICBwYWdpbmF0b3I6IE1hdFBhZ2luYXRvcixcclxuICAgIG1hcHBlcj86IChcclxuICAgICAgcGFnZVNpemU6IG51bWJlclxyXG4gICAgKSA9PiBVbmFyeUZ1bmN0aW9uPE9ic2VydmFibGU8UGFnZUV2ZW50PiwgT2JzZXJ2YWJsZTxhbnk+PlxyXG4gICkge1xyXG4gICAgdGhpcy5hZGRTdHJlYW0oe1xyXG4gICAgICBuYW1lOiAnTWF0UGFnaW5hdG9yJyxcclxuICAgICAgc3RyZWFtOiBwYWdpbmF0b3IucGFnZS5waXBlPGFueT4oXHJcbiAgICAgICAgbWFwcGVyID8gbWFwcGVyKHRoaXMucGFnZVNpemUpIDogbWFwUGFnaW5hdG9yKHRoaXMucGFnZVNpemUpXHJcbiAgICAgICksXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIHNvcnQgY2hhbmdlcyBlbWl0dGVkIHdpbGwgdHJpZ2dlciBhbiB1cGRhdGVcclxuICBzZXRTb3J0KFxyXG4gICAgc29ydDogTWF0U29ydCxcclxuICAgIG1hcHBlcj86ICgpID0+IFVuYXJ5RnVuY3Rpb248T2JzZXJ2YWJsZTxTb3J0PiwgT2JzZXJ2YWJsZTxhbnk+PlxyXG4gICkge1xyXG4gICAgdGhpcy5hZGRTdHJlYW0oe1xyXG4gICAgICBuYW1lOiAnTWF0U29ydCcsXHJcbiAgICAgIHN0cmVhbTogc29ydC5zb3J0Q2hhbmdlLnBpcGU8YW55PihtYXBwZXIgPyBtYXBwZXIoKSA6IG1hcFNvcnQoKSksXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEF0dGFjaHMgYW4gYXV0b2NvbXBsZXRlciB3aXRoIHRoaXMgZGF0YSBzb3VyY2UgZmlsdGVyZWQuIE5vdGUgdGhhdFxyXG4gICAqIHRoZSBzdHJlYW0gcHJvdmlkZWQgd2lsbCBiZSBhY2Nlc3NlZCBkdXJpbmcgY2hhbmdlIGRldGVjdGlvbiBhbmQgc2hvdWxkIG5vdCBkaXJlY3RseSBjaGFuZ2VcclxuICAgKiB2YWx1ZXMgdGhhdCBhcmUgYm91bmQgaW4gdGVtcGxhdGUgdmlld3MuXHJcbiAgICogQHJldHVybnMgT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGEgbmV3IHZhbHVlIHdoZW4gdGhlIGRhdGEgY2hhbmdlcy5cclxuICAgKi9cclxuICBhdHRhY2goKTogT2JzZXJ2YWJsZTxBcnJheTxEYXRhU291cmNlSXRlbT4+IHtcclxuICAgIHJldHVybiB0aGlzLmNvbm5lY3QoKS5waXBlKG1hcCgocmVzKSA9PiB0aGlzLnJlc0ZpbHRlcihyZXMpKSk7XHJcbiAgfVxyXG5cclxuICAvLyBjdXN0b21pemVkIGZpbHRlciB0cmlnZ2VyXHJcbiAgYWJzdHJhY3QgZmlsdGVyKHF1ZXJ5OiBzdHJpbmcsIGxpbWl0OiBudW1iZXIpOiB2b2lkO1xyXG5cclxuICAvLyBjdXN0b21pemVkIHJlc3VsdCBtYXBwZXJcclxuICBhYnN0cmFjdCByZXNGaWx0ZXIocmVzdWx0OiBBcnJheTxSRVM+KTogQXJyYXk8RGF0YVNvdXJjZUl0ZW0+O1xyXG59XHJcbiJdfQ==