import { combineLatest, isObservable, merge, of } from 'rxjs';
import { first, map, scan, startWith, switchMap, tap } from 'rxjs/operators';
import { srcConnect, srcEmitted, srcInvalid, srcOutput } from './messages';
export class DataSourceStreamer {
    constructor(logger) {
        this.logger = logger;
        // streams to listen
        this.streams = [];
    }
    get length() {
        return this.streams.length;
    }
    add(src) {
        this.logger.check(!src.stream, srcInvalid());
        if (src.stream && isObservable(src.stream)) {
            this.streams.push(src);
        }
        return src.name;
    }
    remove(name) {
        this.streams = this.streams.filter((s) => s.name !== name);
    }
    connect() {
        this.logger.print(srcConnect(), this.streams.map((src, i) => src.name || i));
        const required = this.streams
            .filter((src) => !src.optional)
            .sort((a, b) => ((a.weight || 0) < (b.weight || 0) ? -1 : 1))
            .map(this.logEmittedValue());
        const optional = this.streams
            .filter((src) => src.optional)
            .map(this.logEmittedValue());
        return combineLatest([
            required.length
                ? combineLatest(required).pipe(
                // waits the first emission of the required ones
                map((args) => args.reduce(this.reducePartials, {})), first(), 
                // and from there it accumulates the emissions
                switchMap((args) => merge(...required).pipe(startWith(args), scan(this.reducePartials, {}))))
                : of({}),
            optional.length
                ? merge(...optional).pipe(startWith({}), scan(this.reducePartials, {}))
                : of({}),
        ]).pipe(map((args) => args.reduce(this.reducePartials, {})), tap((v) => this.logger.print(srcOutput(), v)));
    }
    logEmittedValue() {
        return (src, i) => src.stream.pipe(tap((output) => this.logger.print(srcEmitted(src.name || i), output)));
    }
    reducePartials(a, b) {
        return { ...a, ...b };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXNvdXJjZS1zdHJlYW1lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvZGF0YXNvdXJjZS9zcmMvbGliL2RhdGFzb3VyY2Utc3RyZWFtZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM5RCxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3RSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRzNFLE1BQU0sT0FBTyxrQkFBa0I7SUFRN0IsWUFBb0IsTUFBd0I7UUFBeEIsV0FBTSxHQUFOLE1BQU0sQ0FBa0I7UUFQNUMsb0JBQW9CO1FBQ3BCLFlBQU8sR0FBK0IsRUFBRSxDQUFDO0lBTU0sQ0FBQztJQUpoRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQzdCLENBQUM7SUFJRCxHQUFHLENBQUMsR0FBd0I7UUFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDN0MsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLFlBQVksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDMUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDeEI7UUFDRCxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUM7SUFDbEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFZO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFD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Q0FBQyxDQUN0RSxDQUFDO0lBQ04sQ0FBQztJQUVPLGNBQWMsQ0FBQyxDQUFhLEVBQUUsQ0FBYTtRQUNqRCxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQztJQUN4QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBpc09ic2VydmFibGUsIG1lcmdlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBmaXJzdCwgbWFwLCBzY2FuLCBzdGFydFdpdGgsIHN3aXRjaE1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBEYXRhU291cmNlTG9nZ2VyIH0gZnJvbSAnLi9kYXRhc291cmNlLWxvZ2dlcic7XHJcbmltcG9ydCB7IHNyY0Nvbm5lY3QsIHNyY0VtaXR0ZWQsIHNyY0ludmFsaWQsIHNyY091dHB1dCB9IGZyb20gJy4vbWVzc2FnZXMnO1xyXG5pbXBvcnQgeyBEYXRhU291cmNlU3RyZWFtIH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgRGF0YVNvdXJjZVN0cmVhbWVyPFQ+IHtcclxuICAvLyBzdHJlYW1zIHRvIGxpc3RlblxyXG4gIHN0cmVhbXM6IEFycmF5PERhdGFTb3VyY2VTdHJlYW08VD4+ID0gW107XHJcblxyXG4gIGdldCBsZW5ndGgoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zdHJlYW1zLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9nZ2VyOiBEYXRhU291cmNlTG9nZ2VyKSB7fVxyXG5cclxuICBhZGQoc3JjOiBEYXRhU291cmNlU3RyZWFtPFQ+KSB7XHJcbiAgICB0aGlzLmxvZ2dlci5jaGVjayghc3JjLnN0cmVhbSwgc3JjSW52YWxpZCgpKTtcclxuICAgIGlmIChzcmMuc3RyZWFtICYmIGlzT2JzZXJ2YWJsZShzcmMuc3RyZWFtKSkge1xyXG4gICAgICB0aGlzLnN0cmVhbXMucHVzaChzcmMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNyYy5uYW1lO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlKG5hbWU6IHN0cmluZykge1xyXG4gICAgdGhpcy5zdHJlYW1zID0gdGhpcy5zdHJlYW1zLmZpbHRlcigocykgPT4gcy5uYW1lICE9PSBuYW1lKTtcclxuICB9XHJcblxyXG4gIGNvbm5lY3QoKSB7XHJcbiAgICB0aGlzLmxvZ2dlci5wcmludChcclxuICAgICAgc3JjQ29ubmVjdCgpLFxyXG4gICAgICB0aGlzLnN0cmVhbXMubWFwKChzcmMsIGkpID0+IHNyYy5uYW1lIHx8IGkpXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IHJlcXVpcmVkID0gdGhpcy5zdHJlYW1zXHJcbiAgICAgIC5maWx0ZXIoKHNyYykgPT4gIXNyYy5vcHRpb25hbClcclxuICAgICAgLnNvcnQoKGEsIGIpID0+ICgoYS53ZWlnaHQgfHwgMCkgPCAoYi53ZWlnaHQgfHwgMCkgPyAtMSA6IDEpKVxyXG4gICAgICAubWFwKHRoaXMubG9nRW1pdHRlZFZhbHVlKCkpO1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbmFsID0gdGhpcy5zdHJlYW1zXHJcbiAgICAgIC5maWx0ZXIoKHNyYykgPT4gc3JjLm9wdGlvbmFsKVxyXG4gICAgICAubWFwKHRoaXMubG9nRW1pdHRlZFZhbHVlKCkpO1xyXG5cclxuICAgIHJldHVybiBjb21iaW5lTGF0ZXN0KFtcclxuICAgICAgcmVxdWlyZWQubGVuZ3RoXHJcbiAgICAgICAgPyBjb21iaW5lTGF0ZXN0KHJlcXVpcmVkKS5waXBlKFxyXG4gICAgICAgICAgICAvLyB3YWl0cyB0aGUgZmlyc3QgZW1pc3Npb24gb2YgdGhlIHJlcXVpcmVkIG9uZXNcclxuICAgICAgICAgICAgbWFwKChhcmdzKSA9PiBhcmdzLnJlZHVjZSh0aGlzLnJlZHVjZVBhcnRpYWxzLCB7fSBhcyBQYXJ0aWFsPFQ+KSksXHJcbiAgICAgICAgICAgIGZpcnN0KCksXHJcbiAgICAgICAgICAgIC8vIGFuZCBmcm9tIHRoZXJlIGl0IGFjY3VtdWxhdGVzIHRoZSBlbWlzc2lvbnNcclxuICAgICAgICAgICAgc3dpdGNoTWFwKChhcmdzKSA9PlxyXG4gICAgICAgICAgICAgIG1lcmdlKC4uLnJlcXVpcmVkKS5waXBlKFxyXG4gICAgICAgICAgICAgICAgc3RhcnRXaXRoKGFyZ3MpLFxyXG4gICAgICAgICAgICAgICAgc2Nhbih0aGlzLnJlZHVjZVBhcnRpYWxzLCB7fSBhcyBQYXJ0aWFsPFQ+KVxyXG4gICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgIDogb2Yoe30gYXMgUGFydGlhbDxUPiksXHJcbiAgICAgIG9wdGlvbmFsLmxlbmd0aFxyXG4gICAgICAgID8gbWVyZ2UoLi4ub3B0aW9uYWwpLnBpcGUoXHJcbiAgICAgICAgICAgIHN0YXJ0V2l0aCh7fSksXHJcbiAgICAgICAgICAgIHNjYW4odGhpcy5yZWR1Y2VQYXJ0aWFscywge30gYXMgUGFydGlhbDxUPilcclxuICAgICAgICAgIClcclxuICAgICAgICA6IG9mKHt9IGFzIFBhcnRpYWw8VD4pLFxyXG4gICAgXSkucGlwZShcclxuICAgICAgbWFwKChhcmdzKSA9PiBhcmdzLnJlZHVjZSh0aGlzLnJlZHVjZVBhcnRpYWxzLCB7fSBhcyBQYXJ0aWFsPFQ+KSksXHJcbiAgICAgIHRhcCgodikgPT4gdGhpcy5sb2dnZXIucHJpbnQoc3JjT3V0cHV0KCksIHYpKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbG9nRW1pdHRlZFZhbHVlKCkge1xyXG4gICAgcmV0dXJuIChzcmM6IERhdGFTb3VyY2VTdHJlYW08VD4sIGk6IG51bWJlcikgPT5cclxuICAgICAgc3JjLnN0cmVhbS5waXBlKFxyXG4gICAgICAgIHRhcCgob3V0cHV0KSA9PiB0aGlzLmxvZ2dlci5wcmludChzcmNFbWl0dGVkKHNyYy5uYW1lIHx8IGkpLCBvdXRwdXQpKVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZWR1Y2VQYXJ0aWFscyhhOiBQYXJ0aWFsPFQ+LCBiOiBQYXJ0aWFsPFQ+KSB7XHJcbiAgICByZXR1cm4geyAuLi5hLCAuLi5iIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==