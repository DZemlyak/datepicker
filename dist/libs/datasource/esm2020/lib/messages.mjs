/**
 * Config Texts
 */
export function emptyMsg() {
    return 'No data available';
}
export function waitMsg() {
    return 'Please wait...';
}
export function delayMsg() {
    return 'The data is still loading...';
}
export function timeoutMsg() {
    return 'Loading has timed out, please try again.';
}
/**
 * Debug Messages
 */
export function removingStream() {
    return `SETUP Removing stream`;
}
export function setValue(name) {
    return `SETUP ${name} =`;
}
export function srcAdding(src) {
    return [`SETUP Adding stream`, src];
}
export function srcEmpty(name) {
    return `SETUP Adding empty stream '${name}'`;
}
export function srcInvalid() {
    return `SETUP Empty stream provided!`;
}
export function srcConnect() {
    return `REQ Connected`;
}
export function srcEmitted(src) {
    return `REQ Stream ${src} emitted`;
}
export function srcOutput() {
    return `REQ Streams output`;
}
export function isAutoStarting() {
    return `REQ DataSource starting automatically`;
}
export function notAutoStarting(length) {
    return `REQ DataSource not auto starting with ${length} streams`;
}
export function resolvedArgs(distinct) {
    return `REQ Resolved ${distinct ? 'the SAME' : ''} request`;
}
export function queryResponse() {
    return 'RAW Query response:';
}
export function queryTimeout() {
    return 'RAW Query timeout count:';
}
export function responseTotal() {
    return 'RAW Calculated total:';
}
export function responseSuccess(result) {
    const len = result.length;
    return [`RES succeed with ${len} item${len === 1 ? '' : 's'}`, result];
}
export function responseError(errors) {
    return ['RES failed', errors];
}
export function disconnecting() {
    return 'Disconnecting';
}
/**
 * Error Messages
 */
export function addWhenRunning(item) {
    return `Adding "${item}" after the DataSource is already running.`;
}
export function rmWhenRunning(item) {
    return `Trying to remove "${item}" after the DataSource is already running.`;
}
export function nonNumeric(name) {
    return 'Non numeric ${name} passed';
}
export function missingDataSourceInput() {
    return 'mat-datasource must receive a dataSource input';
}
export function resException() {
    return 'Exception processing the result';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL2RhdGFzb3VyY2Uvc3JjL2xpYi9tZXNzYWdlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUVILE1BQU0sVUFBVSxRQUFRO0lBQ3RCLE9BQU8sbUJBQW1CLENBQUM7QUFDN0IsQ0FBQztBQUVELE1BQU0sVUFBVSxPQUFPO0lBQ3JCLE9BQU8sZ0JBQWdCLENBQUM7QUFDMUIsQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRO0lBQ3RCLE9BQU8sOEJBQThCLENBQUM7QUFDeEMsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVO0lBQ3hCLE9BQU8sMENBQTBDLENBQUM7QUFDcEQsQ0FBQztBQUVEOztHQUVHO0FBRUgsTUFBTSxVQUFVLGNBQWM7SUFDNUIsT0FBTyx1QkFBdUIsQ0FBQztBQUNqQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxJQUFZO0lBQ25DLE9BQU8sU0FBUyxJQUFJLElBQUksQ0FBQztBQUMzQixDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxHQUFRO0lBQ2hDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxJQUFZO0lBQ25DLE9BQU8sOEJBQThCLElBQUksR0FBRyxDQUFDO0FBQy9DLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVTtJQUN4QixPQUFPLDhCQUE4QixDQUFDO0FBQ3hDLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVTtJQUN4QixPQUFPLGVBQWUsQ0FBQztBQUN6QixDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxHQUFRO0lBQ2pDLE9BQU8sY0FBYyxHQUFHLFVBQVUsQ0FBQztBQUNyQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVM7SUFDdkIsT0FBTyxvQkFBb0IsQ0FBQztBQUM5QixDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWM7SUFDNUIsT0FBTyx1Q0FBdUMsQ0FBQztBQUNqRCxDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxNQUFjO0lBQzVDLE9BQU8seUNBQXlDLE1BQU0sVUFBVSxDQUFDO0FBQ25FLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLFFBQWlCO0lBQzVDLE9BQU8sZ0JBQWdCLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQztBQUM5RCxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWE7SUFDM0IsT0FBTyxxQkFBcUIsQ0FBQztBQUMvQixDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVk7SUFDMUIsT0FBTywwQkFBMEIsQ0FBQztBQUNwQyxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWE7SUFDM0IsT0FBTyx1QkFBdUIsQ0FBQztBQUNqQyxDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxNQUFXO0lBQ3pDLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDMUIsT0FBTyxDQUFDLG9CQUFvQixHQUFHLFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN6RSxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxNQUFXO0lBQ3ZDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhO0lBQzNCLE9BQU8sZUFBZSxDQUFDO0FBQ3pCLENBQUM7QUFFRDs7R0FFRztBQUVILE1BQU0sVUFBVSxjQUFjLENBQUMsSUFBUztJQUN0QyxPQUFPLFdBQVcsSUFBSSw0Q0FBNEMsQ0FBQztBQUNyRSxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxJQUFZO0lBQ3hDLE9BQU8scUJBQXFCLElBQUksNENBQTRDLENBQUM7QUFDL0UsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsSUFBWTtJQUNyQyxPQUFPLDRCQUE0QixDQUFDO0FBQ3RDLENBQUM7QUFFRCxNQUFNLFVBQVUsc0JBQXNCO0lBQ3BDLE9BQU8sZ0RBQWdELENBQUM7QUFDMUQsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZO0lBQzFCLE9BQU8saUNBQWlDLENBQUM7QUFDM0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb25maWcgVGV4dHNcclxuICovXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZW1wdHlNc2coKTogc3RyaW5nIHtcclxuICByZXR1cm4gJ05vIGRhdGEgYXZhaWxhYmxlJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHdhaXRNc2coKTogc3RyaW5nIHtcclxuICByZXR1cm4gJ1BsZWFzZSB3YWl0Li4uJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlbGF5TXNnKCk6IHN0cmluZyB7XHJcbiAgcmV0dXJuICdUaGUgZGF0YSBpcyBzdGlsbCBsb2FkaW5nLi4uJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVvdXRNc2coKTogc3RyaW5nIHtcclxuICByZXR1cm4gJ0xvYWRpbmcgaGFzIHRpbWVkIG91dCwgcGxlYXNlIHRyeSBhZ2Fpbi4nO1xyXG59XHJcblxyXG4vKipcclxuICogRGVidWcgTWVzc2FnZXNcclxuICovXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZpbmdTdHJlYW0oKTogc3RyaW5nIHtcclxuICByZXR1cm4gYFNFVFVQIFJlbW92aW5nIHN0cmVhbWA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRWYWx1ZShuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIHJldHVybiBgU0VUVVAgJHtuYW1lfSA9YDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNyY0FkZGluZyhzcmM6IGFueSk6IGFueVtdIHtcclxuICByZXR1cm4gW2BTRVRVUCBBZGRpbmcgc3RyZWFtYCwgc3JjXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNyY0VtcHR5KG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGBTRVRVUCBBZGRpbmcgZW1wdHkgc3RyZWFtICcke25hbWV9J2A7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzcmNJbnZhbGlkKCk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGBTRVRVUCBFbXB0eSBzdHJlYW0gcHJvdmlkZWQhYDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNyY0Nvbm5lY3QoKTogc3RyaW5nIHtcclxuICByZXR1cm4gYFJFUSBDb25uZWN0ZWRgO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3JjRW1pdHRlZChzcmM6IGFueSk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGBSRVEgU3RyZWFtICR7c3JjfSBlbWl0dGVkYDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNyY091dHB1dCgpOiBzdHJpbmcge1xyXG4gIHJldHVybiBgUkVRIFN0cmVhbXMgb3V0cHV0YDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQXV0b1N0YXJ0aW5nKCk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGBSRVEgRGF0YVNvdXJjZSBzdGFydGluZyBhdXRvbWF0aWNhbGx5YDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG5vdEF1dG9TdGFydGluZyhsZW5ndGg6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGBSRVEgRGF0YVNvdXJjZSBub3QgYXV0byBzdGFydGluZyB3aXRoICR7bGVuZ3RofSBzdHJlYW1zYDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVkQXJncyhkaXN0aW5jdDogYm9vbGVhbik6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGBSRVEgUmVzb2x2ZWQgJHtkaXN0aW5jdCA/ICd0aGUgU0FNRScgOiAnJ30gcmVxdWVzdGA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBxdWVyeVJlc3BvbnNlKCk6IHN0cmluZyB7XHJcbiAgcmV0dXJuICdSQVcgUXVlcnkgcmVzcG9uc2U6JztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5VGltZW91dCgpOiBzdHJpbmcge1xyXG4gIHJldHVybiAnUkFXIFF1ZXJ5IHRpbWVvdXQgY291bnQ6JztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc3BvbnNlVG90YWwoKTogc3RyaW5nIHtcclxuICByZXR1cm4gJ1JBVyBDYWxjdWxhdGVkIHRvdGFsOic7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXNwb25zZVN1Y2Nlc3MocmVzdWx0OiBhbnkpOiBBcnJheTxhbnk+IHtcclxuICBjb25zdCBsZW4gPSByZXN1bHQubGVuZ3RoO1xyXG4gIHJldHVybiBbYFJFUyBzdWNjZWVkIHdpdGggJHtsZW59IGl0ZW0ke2xlbiA9PT0gMSA/ICcnIDogJ3MnfWAsIHJlc3VsdF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXNwb25zZUVycm9yKGVycm9yczogYW55KTogQXJyYXk8YW55PiB7XHJcbiAgcmV0dXJuIFsnUkVTIGZhaWxlZCcsIGVycm9yc107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkaXNjb25uZWN0aW5nKCk6IHN0cmluZyB7XHJcbiAgcmV0dXJuICdEaXNjb25uZWN0aW5nJztcclxufVxyXG5cclxuLyoqXHJcbiAqIEVycm9yIE1lc3NhZ2VzXHJcbiAqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFdoZW5SdW5uaW5nKGl0ZW06IGFueSk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGBBZGRpbmcgXCIke2l0ZW19XCIgYWZ0ZXIgdGhlIERhdGFTb3VyY2UgaXMgYWxyZWFkeSBydW5uaW5nLmA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBybVdoZW5SdW5uaW5nKGl0ZW06IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGBUcnlpbmcgdG8gcmVtb3ZlIFwiJHtpdGVtfVwiIGFmdGVyIHRoZSBEYXRhU291cmNlIGlzIGFscmVhZHkgcnVubmluZy5gO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbm9uTnVtZXJpYyhuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIHJldHVybiAnTm9uIG51bWVyaWMgJHtuYW1lfSBwYXNzZWQnO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWlzc2luZ0RhdGFTb3VyY2VJbnB1dCgpOiBzdHJpbmcge1xyXG4gIHJldHVybiAnbWF0LWRhdGFzb3VyY2UgbXVzdCByZWNlaXZlIGEgZGF0YVNvdXJjZSBpbnB1dCc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXNFeGNlcHRpb24oKTogc3RyaW5nIHtcclxuICByZXR1cm4gJ0V4Y2VwdGlvbiBwcm9jZXNzaW5nIHRoZSByZXN1bHQnO1xyXG59XHJcbiJdfQ==