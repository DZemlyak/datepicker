{"version":3,"file":"matheo-datasource.mjs","sources":["../../../../libs/datasource/src/lib/messages.ts","../../../../libs/datasource/src/lib/directives.ts","../../../../libs/datasource/src/lib/overlay.html","../../../../libs/datasource/src/lib/overlay.ts","../../../../libs/datasource/src/lib/container.ts","../../../../libs/datasource/src/lib/container.html","../../../../libs/datasource/src/lib/datasource-intl.ts","../../../../libs/datasource/src/lib/datasource-pipe.ts","../../../../libs/datasource/src/lib/datasource-module.ts","../../../../libs/datasource/src/lib/datasource-config.ts","../../../../libs/datasource/src/lib/datasource-logger.ts","../../../../libs/datasource/src/lib/datasource-streamer.ts","../../../../libs/datasource/src/lib/datasource.ts","../../../../libs/datasource/src/lib/mappers.ts","../../../../libs/datasource/src/lib/datasource-reactive.ts","../../../../libs/datasource/src/matheo-datasource.ts"],"sourcesContent":["/**\r\n * Config Texts\r\n */\r\n\r\nexport function emptyMsg(): string {\r\n  return 'No data available';\r\n}\r\n\r\nexport function waitMsg(): string {\r\n  return 'Please wait...';\r\n}\r\n\r\nexport function delayMsg(): string {\r\n  return 'The data is still loading...';\r\n}\r\n\r\nexport function timeoutMsg(): string {\r\n  return 'Loading has timed out, please try again.';\r\n}\r\n\r\n/**\r\n * Debug Messages\r\n */\r\n\r\nexport function removingStream(): string {\r\n  return `SETUP Removing stream`;\r\n}\r\n\r\nexport function setValue(name: string): string {\r\n  return `SETUP ${name} =`;\r\n}\r\n\r\nexport function srcAdding(src: any): any[] {\r\n  return [`SETUP Adding stream`, src];\r\n}\r\n\r\nexport function srcEmpty(name: string): string {\r\n  return `SETUP Adding empty stream '${name}'`;\r\n}\r\n\r\nexport function srcInvalid(): string {\r\n  return `SETUP Empty stream provided!`;\r\n}\r\n\r\nexport function srcConnect(): string {\r\n  return `REQ Connected`;\r\n}\r\n\r\nexport function srcEmitted(src: any): string {\r\n  return `REQ Stream ${src} emitted`;\r\n}\r\n\r\nexport function srcOutput(): string {\r\n  return `REQ Streams output`;\r\n}\r\n\r\nexport function isAutoStarting(): string {\r\n  return `REQ DataSource starting automatically`;\r\n}\r\n\r\nexport function notAutoStarting(length: number): string {\r\n  return `REQ DataSource not auto starting with ${length} streams`;\r\n}\r\n\r\nexport function resolvedArgs(distinct: boolean): string {\r\n  return `REQ Resolved ${distinct ? 'the SAME' : ''} request`;\r\n}\r\n\r\nexport function queryResponse(): string {\r\n  return 'RAW Query response:';\r\n}\r\n\r\nexport function queryTimeout(): string {\r\n  return 'RAW Query timeout count:';\r\n}\r\n\r\nexport function responseTotal(): string {\r\n  return 'RAW Calculated total:';\r\n}\r\n\r\nexport function responseSuccess(result: any): Array<any> {\r\n  const len = result.length;\r\n  return [`RES succeed with ${len} item${len === 1 ? '' : 's'}`, result];\r\n}\r\n\r\nexport function responseError(errors: any): Array<any> {\r\n  return ['RES failed', errors];\r\n}\r\n\r\nexport function disconnecting(): string {\r\n  return 'Disconnecting';\r\n}\r\n\r\n/**\r\n * Error Messages\r\n */\r\n\r\nexport function addWhenRunning(item: any): string {\r\n  return `Adding \"${item}\" after the DataSource is already running.`;\r\n}\r\n\r\nexport function rmWhenRunning(item: string): string {\r\n  return `Trying to remove \"${item}\" after the DataSource is already running.`;\r\n}\r\n\r\nexport function nonNumeric(name: string): string {\r\n  return 'Non numeric ${name} passed';\r\n}\r\n\r\nexport function missingDataSourceInput(): string {\r\n  return 'mat-datasource must receive a dataSource input';\r\n}\r\n\r\nexport function resException(): string {\r\n  return 'Exception processing the result';\r\n}\r\n","import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: 'mat-datasource-content',\r\n  host: {\r\n    class: 'mat-datasource-content'\r\n  }\r\n})\r\nexport class DataSourceContent {}\r\n\r\n@Directive({\r\n  selector: 'mat-datasource-empty',\r\n  host: {\r\n    class: 'mat-datasource-empty'\r\n  }\r\n})\r\nexport class DataSourceEmpty {}\r\n\r\n@Directive({\r\n  selector: 'mat-datasource-error',\r\n  host: {\r\n    class: 'mat-datasource-error'\r\n  }\r\n})\r\nexport class DataSourceError {}\r\n\r\n@Directive({\r\n  selector: 'mat-datasource-loading',\r\n  host: {\r\n    class: 'mat-datasource-loading'\r\n  }\r\n})\r\nexport class DataSourceLoading {}\r\n","<ng-container *ngIf=\"dataSource.isLoading then loading; else loaded\"></ng-container>\r\n\r\n<ng-template #loading>\r\n  <mat-progress-spinner\r\n    [mode]=\"dataSource.progressMode\"\r\n    [value]=\"dataSource.progress\"\r\n    [diameter]=\"diameter\"\r\n    [strokeWidth]=\"strokeWidth\"\r\n  ></mat-progress-spinner>\r\n\r\n  <div #out>\r\n    <ng-content select=\"mat-datasource-loading\"></ng-content>\r\n  </div>\r\n  <ng-container *ngIf=\"!out.childNodes.length\">\r\n    <mat-datasource-loading *ngIf=\"dataSource.outputMsg\">{{ dataSource.outputMsg }}</mat-datasource-loading>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #loaded>\r\n  <ng-container *ngIf=\"dataSource.hasErrors then errors; else empty\"></ng-container>\r\n\r\n  <ng-template #errors>\r\n    <div class=\"mat-datasource-overlay\" #err>\r\n      <ng-content select=\"mat-datasource-error\"></ng-content>\r\n    </div>\r\n    <ng-container *ngIf=\"!err.childNodes.length\">\r\n      <mat-datasource-error *ngFor=\"let error of dataSource.getErrors | keyvalue\">{{ error.value }}</mat-datasource-error>\r\n    </ng-container>\r\n  </ng-template>\r\n\r\n  <ng-template #empty>\r\n    <div class=\"mat-datasource-overlay\" #emp>\r\n      <ng-content select=\"mat-datasource-empty\"></ng-content>\r\n    </div>\r\n    <ng-container *ngIf=\"!emp.childNodes.length\">\r\n      <mat-datasource-empty>{{ dataSource.outputMsg }}</mat-datasource-empty>\r\n    </ng-container>\r\n  </ng-template>\r\n</ng-template>\r\n","import {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { MatDataSource } from './datasource';\r\nimport { missingDataSourceInput } from './messages';\r\n\r\n@Component({\r\n  selector: 'mat-datasource-overlay',\r\n  templateUrl: './overlay.html',\r\n  host: {\r\n    class: 'mat-datasource-overlay'\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataSourceOverlay<REQ, RAW, RES>\r\n  implements AfterContentInit, OnDestroy {\r\n  @Input() dataSource: MatDataSource<REQ, RAW, RES>;\r\n\r\n  @Input() diameter: number;\r\n  @Input() strokeWidth: number;\r\n\r\n  @HostBinding('style.display')\r\n  _display: string;\r\n\r\n  private onDestroy = new Subject<void>();\r\n\r\n  constructor(private readonly cdr: ChangeDetectorRef) {}\r\n\r\n  ngAfterContentInit() {\r\n    this._validateSource();\r\n\r\n    // listen source changes\r\n    this.dataSource.change$.pipe(takeUntil(this.onDestroy)).subscribe(() => {\r\n      this._display =\r\n        this.dataSource.isLoading ||\r\n        this.dataSource.hasErrors ||\r\n        this.dataSource.isEmpty\r\n          ? 'flex'\r\n          : 'none';\r\n\r\n      this.cdr.markForCheck();\r\n    });\r\n  }\r\n\r\n  private _validateSource() {\r\n    if (!this.dataSource) {\r\n      throw Error(missingDataSourceInput());\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.onDestroy.next();\r\n    this.onDestroy.complete();\r\n  }\r\n}\r\n","import {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { MatDataSource } from './datasource';\r\nimport { missingDataSourceInput } from './messages';\r\n\r\n@Component({\r\n  selector: 'mat-datasource',\r\n  templateUrl: './container.html',\r\n  styleUrls: ['./container.scss', './directives.scss', './overlay.scss'],\r\n  host: {\r\n    class: 'mat-datasource'\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataSourceContainer<REQ, RAW, RES> implements AfterContentInit {\r\n  @Input() dataSource: MatDataSource<REQ, RAW, RES>;\r\n\r\n  @Input() diameter = 40;\r\n  @Input() strokeWidth = 5;\r\n\r\n  constructor() {}\r\n\r\n  ngAfterContentInit() {\r\n    this._validateSource();\r\n  }\r\n\r\n  private _validateSource() {\r\n    if (!this.dataSource) {\r\n      throw Error(missingDataSourceInput());\r\n    }\r\n  }\r\n}\r\n","<div class=\"mat-datasource-container\">\r\n  <div class=\"mat-datasource-output\" [attr.hidden]=\"dataSource.isLoading || dataSource.isEmpty ? '' : null\">\r\n    <ng-content select=\"mat-table,table,[mat-datasource-content]\"></ng-content>\r\n  </div>\r\n\r\n  <mat-datasource-overlay [dataSource]=\"dataSource\" [diameter]=\"diameter\" [strokeWidth]=\"strokeWidth\">\r\n    <ng-content select=\"mat-datasource-empty\" ngProjectAs=\"mat-datasource-empty\"></ng-content>\r\n    <ng-content select=\"mat-datasource-error\" ngProjectAs=\"mat-datasource-error\"></ng-content>\r\n    <ng-content select=\"mat-datasource-loading\" ngProjectAs=\"mat-datasource-loading\"></ng-content>\r\n  </mat-datasource-overlay>\r\n</div>\r\n\r\n<div [attr.hidden]=\"dataSource.isLoading || dataSource.isEmpty ? '' : null\">\r\n  <ng-content></ng-content>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\n\r\n/** DataSource messages that requires internationalization. */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MatDataSourceIntl<REQ = any> {\r\n  /** A message to show when there's no resulting data. */\r\n  emptyMsg: ((args?: REQ) => string) | string = 'No data available';\r\n\r\n  /** A waiting message to show while loading the data. */\r\n  waitMsg: string = 'Please wait...';\r\n\r\n  /** A waiting message when the data is taking too long. */\r\n  delayMsg: string = 'The data is still loading...';\r\n\r\n  /** A timeout message if there's no response. */\r\n  timeoutMsg: string = 'Loading has timed out, please try again.';\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  OnDestroy,\r\n  Pipe,\r\n  PipeTransform,\r\n  Type,\r\n  ɵisObservable,\r\n  ɵstringify as stringify,\r\n} from '@angular/core';\r\nimport { Observable, SubscriptionLike } from 'rxjs';\r\nimport { ReactiveDataSource } from './datasource-reactive';\r\n\r\nexport function invalidPipeArgumentError(type: Type<any>, value: Object) {\r\n  return Error(`InvalidPipeArgument: '${value}' for pipe '${stringify(type)}'`);\r\n}\r\n\r\ninterface SubscriptionStrategy {\r\n  createSubscription(\r\n    async: Observable<any>,\r\n    updateLatestValue: any\r\n  ): SubscriptionLike;\r\n  dispose(subscription: SubscriptionLike): void;\r\n  onDestroy(subscription: SubscriptionLike): void;\r\n}\r\n\r\nclass ObservableStrategy implements SubscriptionStrategy {\r\n  createSubscription(\r\n    async: Observable<any>,\r\n    updateLatestValue: any\r\n  ): SubscriptionLike {\r\n    return async.subscribe({\r\n      next: updateLatestValue,\r\n      error: (e: any) => {\r\n        throw e;\r\n      },\r\n    });\r\n  }\r\n\r\n  dispose(subscription: SubscriptionLike): void {\r\n    subscription.unsubscribe();\r\n  }\r\n\r\n  onDestroy(subscription: SubscriptionLike): void {\r\n    subscription.unsubscribe();\r\n  }\r\n}\r\n\r\nconst _observableStrategy = new ObservableStrategy();\r\n\r\n/**\r\n * Unwraps a value from an asynchronous primitive.\r\n *\r\n * The `dataSource` pipe subscribes to a `DataSource` and returns the latest value it has\r\n * emitted. When a new value is emitted, the `dataSource` pipe marks the component to be checked for\r\n * changes. When the component gets destroyed, the `dataSource` pipe disconnects automatically to avoid\r\n * potential memory leaks.\r\n */\r\n@Pipe({ name: 'dataSource', pure: false })\r\nexport class DataSourcePipe implements OnDestroy, PipeTransform {\r\n  private _latestValue: any = null;\r\n\r\n  private _subscription: SubscriptionLike | null = null;\r\n  private _obj: ReactiveDataSource<any, any, any> | null = null;\r\n  private _strategy: SubscriptionStrategy = null!;\r\n\r\n  constructor(private _ref: ChangeDetectorRef) {}\r\n\r\n  ngOnDestroy(): void {\r\n    if (this._subscription) {\r\n      this._dispose();\r\n    }\r\n  }\r\n\r\n  transform<T>(obj: null): null;\r\n  transform<T>(obj: undefined): undefined;\r\n  transform(obj: ReactiveDataSource<any, any, any> | null | undefined): any {\r\n    if (!this._obj) {\r\n      if (obj) {\r\n        this._subscribe(obj);\r\n      }\r\n      return this._latestValue;\r\n    }\r\n\r\n    if (obj !== this._obj) {\r\n      this._dispose();\r\n      return this.transform(obj as any);\r\n    }\r\n\r\n    return this._latestValue;\r\n  }\r\n\r\n  private _subscribe(obj: ReactiveDataSource<any, any, any>): void {\r\n    this._obj = obj;\r\n    this._strategy = this._selectStrategy(obj);\r\n    const stream = obj.connect();\r\n    this._subscription = this._strategy.createSubscription(\r\n      stream,\r\n      (value: Object) => this._updateLatestValue(obj, value)\r\n    );\r\n  }\r\n\r\n  private _selectStrategy(obj: ReactiveDataSource<any, any, any>): any {\r\n    if (ɵisObservable(obj.change$)) {\r\n      return _observableStrategy;\r\n    }\r\n\r\n    throw invalidPipeArgumentError(DataSourcePipe, obj);\r\n  }\r\n\r\n  private _dispose(): void {\r\n    this._strategy.dispose(this._subscription!);\r\n    this._obj.disconnect();\r\n    this._latestValue = null;\r\n    this._subscription = null;\r\n    this._obj = null;\r\n  }\r\n\r\n  private _updateLatestValue(async: any, value: Object): void {\r\n    if (async === this._obj) {\r\n      this._latestValue = value;\r\n      this._ref.markForCheck();\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n\r\nimport { DataSourceContainer } from './container';\r\nimport { MatDataSourceIntl } from './datasource-intl';\r\nimport { DataSourcePipe } from './datasource-pipe';\r\nimport {\r\n  DataSourceContent,\r\n  DataSourceEmpty,\r\n  DataSourceError,\r\n  DataSourceLoading,\r\n} from './directives';\r\nimport { DataSourceOverlay } from './overlay';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatProgressSpinnerModule],\r\n  declarations: [\r\n    DataSourceContainer,\r\n    DataSourceContent,\r\n    DataSourceEmpty,\r\n    DataSourceError,\r\n    DataSourceLoading,\r\n    DataSourceOverlay,\r\n    DataSourcePipe,\r\n  ],\r\n  exports: [\r\n    MatProgressSpinnerModule,\r\n    DataSourceContainer,\r\n    DataSourceContent,\r\n    DataSourceEmpty,\r\n    DataSourceError,\r\n    DataSourceLoading,\r\n    DataSourcePipe,\r\n  ],\r\n  providers: [MatDataSourceIntl],\r\n})\r\nexport class MatDataSourceModule {}\r\n","import { ProgressSpinnerMode } from '@angular/material/progress-spinner';\r\nimport { delayMsg, emptyMsg, timeoutMsg, waitMsg } from './messages';\r\n\r\n/**\r\n * DataSource Config\r\n */\r\n\r\nexport interface DataSourceConfig {\r\n  debug?: boolean;\r\n  autoStart: boolean;\r\n  errorHandler?: (err: any) => string;\r\n  showErrors: boolean;\r\n  emptyMsg?: ((args?: any) => string) | string;\r\n  waitMsg?: string;\r\n  delayMsg?: string;\r\n  timeoutMsg?: string;\r\n  waitMs: number; // ms to wait before show the waitMsg\r\n  intervalMs: number; // timer interval to timeout the request\r\n  progressMode: ProgressSpinnerMode;\r\n}\r\n\r\nexport const defaultConfig: DataSourceConfig = {\r\n  debug: false,\r\n  autoStart: true,\r\n  showErrors: true,\r\n  emptyMsg: emptyMsg,\r\n  waitMsg: waitMsg(),\r\n  delayMsg: delayMsg(),\r\n  timeoutMsg: timeoutMsg(),\r\n  waitMs: 5000,\r\n  intervalMs: 10000,\r\n  progressMode: 'indeterminate',\r\n};\r\n","import { DataSourceConfig } from './datasource-config';\r\nimport { MatDataSourceIntl } from './datasource-intl';\r\n\r\n/**\r\n * Logging Handler\r\n */\r\nexport class DataSourceLogger {\r\n  /**\r\n   * Errors Collection\r\n   */\r\n  private _errors: { [errorCode: string]: string } = {};\r\n\r\n  set config(config: DataSourceConfig) {\r\n    this._config = config;\r\n  }\r\n  private _config: DataSourceConfig;\r\n\r\n  constructor(private sourceName: string, private _intl?: MatDataSourceIntl) {}\r\n\r\n  /**\r\n   * Error Management Methods\r\n   */\r\n\r\n  getErrors() {\r\n    return this._errors;\r\n  }\r\n\r\n  addError(errorCode: string, error: string | { message: string }): void {\r\n    this._errors[errorCode] = typeof error === 'string' ? error : error.message;\r\n  }\r\n\r\n  handleError(errorCode: string, error: any): void {\r\n    this._config.errorHandler\r\n      ? this.addError(errorCode, this._config.errorHandler(error))\r\n      : this.addError(errorCode, error);\r\n  }\r\n\r\n  hasError(errorCode: string): boolean {\r\n    return this._errors.hasOwnProperty(errorCode);\r\n  }\r\n\r\n  hasErrors(force = false): boolean {\r\n    return (\r\n      (this._config.showErrors || force) && !!Object.keys(this._errors).length\r\n    );\r\n  }\r\n\r\n  getTimeoutError(attempt: number) {\r\n    switch (attempt) {\r\n      case 0:\r\n        return this._intl?.waitMsg || this._config.waitMsg;\r\n      case 1:\r\n        return this._intl?.delayMsg || this._config.delayMsg;\r\n      default:\r\n        throw new Error(this._intl?.timeoutMsg || this._config.timeoutMsg);\r\n    }\r\n  }\r\n\r\n  clearErrors() {\r\n    this._errors = {};\r\n  }\r\n\r\n  /**\r\n   * Debug Utils\r\n   */\r\n\r\n  // display a message according a condition\r\n  debug(truthy: any, falsy?: any, condition: any = true) {\r\n    if (this._config.debug) {\r\n      if (condition) {\r\n        truthy = Array.isArray(truthy) ? truthy : [truthy];\r\n        console.log(`${this.sourceName}:`, ...truthy);\r\n      } else if (falsy) {\r\n        falsy = Array.isArray(falsy) ? falsy : [falsy];\r\n        console.log(`${this.sourceName}:`, ...falsy);\r\n      }\r\n    }\r\n  }\r\n\r\n  // logs an object if debug mode is enabled\r\n  print(message: string, obj: any) {\r\n    if (this._config.debug) {\r\n      console.log(`${this.sourceName}:`, message, obj);\r\n    }\r\n  }\r\n\r\n  // throw an error if the condition is truthy\r\n  check(condition: any, message: string) {\r\n    if (condition) {\r\n      throw new Error(`${this.sourceName}: ${message}`);\r\n    }\r\n  }\r\n}\r\n","import { combineLatest, isObservable, merge, of } from 'rxjs';\r\nimport { first, map, scan, startWith, switchMap, tap } from 'rxjs/operators';\r\nimport { DataSourceLogger } from './datasource-logger';\r\nimport { srcConnect, srcEmitted, srcInvalid, srcOutput } from './messages';\r\nimport { DataSourceStream } from './types';\r\n\r\nexport class DataSourceStreamer<T> {\r\n  // streams to listen\r\n  streams: Array<DataSourceStream<T>> = [];\r\n\r\n  get length() {\r\n    return this.streams.length;\r\n  }\r\n\r\n  constructor(private logger: DataSourceLogger) {}\r\n\r\n  add(src: DataSourceStream<T>) {\r\n    this.logger.check(!src.stream, srcInvalid());\r\n    if (src.stream && isObservable(src.stream)) {\r\n      this.streams.push(src);\r\n    }\r\n    return src.name;\r\n  }\r\n\r\n  remove(name: string) {\r\n    this.streams = this.streams.filter((s) => s.name !== name);\r\n  }\r\n\r\n  connect() {\r\n    this.logger.print(\r\n      srcConnect(),\r\n      this.streams.map((src, i) => src.name || i)\r\n    );\r\n\r\n    const required = this.streams\r\n      .filter((src) => !src.optional)\r\n      .sort((a, b) => ((a.weight || 0) < (b.weight || 0) ? -1 : 1))\r\n      .map(this.logEmittedValue());\r\n\r\n    const optional = this.streams\r\n      .filter((src) => src.optional)\r\n      .map(this.logEmittedValue());\r\n\r\n    return combineLatest([\r\n      required.length\r\n        ? combineLatest(required).pipe(\r\n            // waits the first emission of the required ones\r\n            map((args) => args.reduce(this.reducePartials, {} as Partial<T>)),\r\n            first(),\r\n            // and from there it accumulates the emissions\r\n            switchMap((args) =>\r\n              merge(...required).pipe(\r\n                startWith(args),\r\n                scan(this.reducePartials, {} as Partial<T>)\r\n              )\r\n            )\r\n          )\r\n        : of({} as Partial<T>),\r\n      optional.length\r\n        ? merge(...optional).pipe(\r\n            startWith({}),\r\n            scan(this.reducePartials, {} as Partial<T>)\r\n          )\r\n        : of({} as Partial<T>),\r\n    ]).pipe(\r\n      map((args) => args.reduce(this.reducePartials, {} as Partial<T>)),\r\n      tap((v) => this.logger.print(srcOutput(), v))\r\n    );\r\n  }\r\n\r\n  private logEmittedValue() {\r\n    return (src: DataSourceStream<T>, i: number) =>\r\n      src.stream.pipe(\r\n        tap((output) => this.logger.print(srcEmitted(src.name || i), output))\r\n      );\r\n  }\r\n\r\n  private reducePartials(a: Partial<T>, b: Partial<T>) {\r\n    return { ...a, ...b };\r\n  }\r\n}\r\n","import { DataSource } from '@angular/cdk/table';\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { isEqual } from 'lodash';\r\nimport {\r\n  BehaviorSubject,\r\n  isObservable,\r\n  merge,\r\n  Observable,\r\n  of,\r\n  Subject,\r\n  timer,\r\n} from 'rxjs';\r\nimport {\r\n  catchError,\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  skipWhile,\r\n  switchMap,\r\n  take,\r\n  takeUntil,\r\n  tap,\r\n  throttleTime,\r\n} from 'rxjs/operators';\r\nimport { DataSourceConfig, defaultConfig } from './datasource-config';\r\nimport { MatDataSourceIntl } from './datasource-intl';\r\nimport { DataSourceLogger } from './datasource-logger';\r\nimport { DataSourceStreamer } from './datasource-streamer';\r\nimport {\r\n  addWhenRunning,\r\n  disconnecting,\r\n  emptyMsg,\r\n  isAutoStarting,\r\n  notAutoStarting,\r\n  queryResponse,\r\n  queryTimeout,\r\n  removingStream,\r\n  resolvedArgs,\r\n  responseError,\r\n  responseSuccess,\r\n  responseTotal,\r\n  rmWhenRunning,\r\n  srcAdding,\r\n  srcEmpty,\r\n} from './messages';\r\nimport { DataSourceOpts, DataSourceStream } from './types';\r\n\r\n@Injectable()\r\nexport abstract class MatDataSource<REQ = any, RAW = any, RES = any>\r\n  extends DataSource<RES>\r\n  implements OnDestroy {\r\n  /**\r\n   * State to control outside behavior like css classes and components.\r\n   * Updated by pre/postQuery to show/hide the loading overlay and empty message.\r\n   */\r\n  private _reloading = true;\r\n\r\n  get isLoading() {\r\n    return this._loading;\r\n  }\r\n  private _loading = true;\r\n\r\n  get isLoaded() {\r\n    return this._loaded;\r\n  }\r\n  private _loaded = false;\r\n\r\n  get isEmpty() {\r\n    return this._empty;\r\n  }\r\n  private _empty = true;\r\n\r\n  set skipSave(val: any) {\r\n    this._skip = !!val;\r\n  }\r\n  private _skip = false;\r\n\r\n  /**\r\n   * Number used to calculate the pagination length.\r\n   * Updated after the rawResult method according to the response data.\r\n   */\r\n  get total() {\r\n    return this._total;\r\n  }\r\n  private _total = 0;\r\n\r\n  get data() {\r\n    return this._data ? this._data : [];\r\n  }\r\n  private _data: Array<RES> = [];\r\n\r\n  /**\r\n   * Number used to calculate the loading progress.\r\n   * Updated while loading the query and triggering change$.\r\n   */\r\n  get progress() {\r\n    return this._progress;\r\n  }\r\n  protected _progress = 0;\r\n\r\n  /**\r\n   * Output message getter.\r\n   */\r\n  get outputMsg() {\r\n    return this._outputMsg;\r\n  }\r\n  protected _outputMsg: string;\r\n\r\n  /**\r\n   * Accessors\r\n   */\r\n  get args(): REQ {\r\n    return this.arguments || ({} as REQ);\r\n  }\r\n\r\n  get progressMode() {\r\n    return this._config.progressMode;\r\n  }\r\n\r\n  get change$() {\r\n    return this._change$.asObservable();\r\n  }\r\n\r\n  get data$() {\r\n    return this._data$.asObservable();\r\n  }\r\n\r\n  get hasErrors() {\r\n    return this._logger.hasErrors(true);\r\n  }\r\n\r\n  get getErrors() {\r\n    return this._logger.getErrors();\r\n  }\r\n\r\n  /**\r\n   * Setters\r\n   */\r\n\r\n  // config settings\r\n  get config() {\r\n    return this._config;\r\n  }\r\n  set config(config: Partial<DataSourceConfig>) {\r\n    this._config = {\r\n      ...this._config,\r\n      ...config,\r\n    };\r\n    this._logger.config = this._config;\r\n  }\r\n  protected _config = defaultConfig;\r\n\r\n  /**\r\n   * Control members for the datasource processing.\r\n   */\r\n  protected defaults: Partial<REQ> = {};\r\n  protected overrides: Partial<REQ> = {};\r\n  protected arguments: REQ & DataSourceOpts;\r\n\r\n  /**\r\n   * Error control vars.\r\n   */\r\n  protected readonly _logger = new DataSourceLogger(\r\n    this.constructor.name,\r\n    this.intl\r\n  );\r\n\r\n  /**\r\n   * Stream only used to trigger a refresh on the data.\r\n   * Can receive some Criteria overrides for a temporary update.\r\n   * It has to be used outside the datasource to prevent infinite loops.\r\n   */\r\n  protected readonly _trigger$ = new BehaviorSubject<\r\n    Partial<REQ> | DataSourceOpts\r\n  >({});\r\n\r\n  /** Executions counter */\r\n  private _triggered = 0;\r\n\r\n  /** Registered streams */\r\n  private readonly _streams = new DataSourceStreamer<REQ | DataSourceOpts>(\r\n    this._logger\r\n  );\r\n\r\n  /** Output Emitter to refresh the UI. */\r\n  protected readonly _change$ = new BehaviorSubject<any>({});\r\n\r\n  /** Output Emitter of the latest Data. */\r\n  protected readonly _data$ = new Subject<Array<RES>>();\r\n\r\n  /** Disconnect internal observable. */\r\n  protected readonly _disconnect$ = new Subject<void>();\r\n\r\n  /**\r\n   * DataSource.\r\n   */\r\n  constructor(protected intl?: MatDataSourceIntl<REQ>) {\r\n    super();\r\n\r\n    // update i18n if present\r\n    if (this.intl) {\r\n      this.config = this.intl;\r\n    }\r\n\r\n    // initial config sync\r\n    this._logger.config = this._config;\r\n\r\n    // listen the internal trigger\r\n    this.addStream(this._trigger$);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._logger.print(disconnecting(), '');\r\n    this.disconnect();\r\n  }\r\n\r\n  /**\r\n   * Streams\r\n   */\r\n\r\n  addArguments(args: Partial<REQ>) {\r\n    this.defaults = { ...this.defaults, ...args };\r\n  }\r\n\r\n  addStream(\r\n    stream: Observable<Partial<REQ | DataSourceOpts>> | DataSourceStream<REQ>\r\n  ): string {\r\n    const src: DataSourceStream<REQ | DataSourceOpts> = isObservable(stream)\r\n      ? {\r\n          name: this._streams.length.toString(),\r\n          stream,\r\n        }\r\n      : stream;\r\n\r\n    this._logger.check(this._triggered, addWhenRunning(src.name || src.stream));\r\n    this._logger.debug(srcAdding(src.name), srcEmpty(src.name), stream);\r\n\r\n    return this._streams.add(src);\r\n  }\r\n\r\n  remStream(name: string) {\r\n    this._logger.check(this._triggered, rmWhenRunning(name));\r\n    this._logger.print(removingStream(), name);\r\n    this._streams.remove(name);\r\n  }\r\n\r\n  /**\r\n   * Triggers\r\n   */\r\n\r\n  refresh(overrides: Partial<REQ> = {}) {\r\n    this.overrides = overrides;\r\n    this._trigger$.next(overrides);\r\n  }\r\n\r\n  reload() {\r\n    this._reloading = true;\r\n    this._trigger$.next({ forceReload: new Date().getTime() });\r\n  }\r\n\r\n  restart() {\r\n    this._triggered = 0;\r\n  }\r\n\r\n  /**\r\n   * Data processing that can be completely customized.\r\n   */\r\n  reqArguments(args: REQ): REQ {\r\n    return args;\r\n  }\r\n\r\n  abstract rawDefault(): RAW;\r\n\r\n  abstract rawFetch(args: REQ): Observable<RAW>;\r\n\r\n  abstract rawTotal(result: RAW): Observable<number>;\r\n\r\n  rawFilter(result: RAW) {\r\n    return true;\r\n  }\r\n\r\n  abstract rawResult(result: RAW): Array<RES>;\r\n\r\n  /**\r\n   * Data Fetching Methods\r\n   */\r\n  private _blockStart(): boolean {\r\n    // check if it's not configured to start after the first trigger\r\n    const block = this._triggered === 1 && !this._config.autoStart;\r\n\r\n    if (this._triggered === 1) {\r\n      this._logger.debug(\r\n        isAutoStarting(),\r\n        notAutoStarting(this._streams.length),\r\n        !block\r\n      );\r\n    }\r\n\r\n    if (block) {\r\n      this._loading = false;\r\n    }\r\n\r\n    return block;\r\n  }\r\n\r\n  private _getArgs(output: Partial<REQ | DataSourceOpts>): REQ {\r\n    // merge all the stream outputs\r\n    this.arguments = {\r\n      ...this.defaults,\r\n      ...output,\r\n      ...this.overrides,\r\n    } as any;\r\n\r\n    delete this.arguments.forceReload;\r\n\r\n    return this.arguments;\r\n  }\r\n\r\n  private _isEqual(): (prev: REQ, curr: REQ) => boolean {\r\n    return (prev, curr) => {\r\n      const isDistinct = !this._reloading && isEqual(prev, curr);\r\n\r\n      this._logger.print(resolvedArgs(isDistinct), curr);\r\n\r\n      return isDistinct;\r\n    };\r\n  }\r\n\r\n  private _preQuery(): void {\r\n    // state update\r\n    this._loading = true;\r\n    this._reloading = false;\r\n    this._outputMsg = '';\r\n    this._logger.clearErrors();\r\n    this._change$.next({});\r\n    this.overrides = {};\r\n  }\r\n\r\n  private _execQuery(args: REQ): Observable<RAW> {\r\n    const query = this.rawFetch(args);\r\n\r\n    return merge(\r\n      query,\r\n      // timers check\r\n      timer(this.config.waitMs, this.config.intervalMs).pipe(\r\n        takeUntil(query),\r\n        take(3) // by default: 5s, 15s, 25s\r\n      )\r\n    ).pipe(\r\n      // delay check\r\n      tap((val) => {\r\n        if (typeof val !== 'number') {\r\n          this._logger.print(queryResponse(), val);\r\n        } else {\r\n          this._logger.print(queryTimeout(), val);\r\n          try {\r\n            this._outputMsg = this._logger.getTimeoutError(val);\r\n          } catch (e) {\r\n            this._logger.addError('timeout', e.message);\r\n            this._loading = false;\r\n          }\r\n          this._change$.next({});\r\n        }\r\n      }),\r\n      // discard timer result\r\n      filter<RAW>((result) => typeof result !== 'number'),\r\n      catchError((err) => {\r\n        // isolate query error\r\n        this._logger.handleError('query', err);\r\n        return of(this.rawDefault());\r\n      })\r\n    );\r\n  }\r\n\r\n  private _updateTotal(res: RAW): void {\r\n    if (!this.hasErrors) {\r\n      // microtask as workaround for change detection\r\n      this.rawTotal(res)\r\n        .pipe(\r\n          take(1),\r\n          tap((total) => this._logger.print(responseTotal(), total))\r\n        )\r\n        .subscribe((total) => {\r\n          this._total = total;\r\n          this._change$.next({});\r\n        });\r\n    }\r\n  }\r\n\r\n  private _processException(err: any) {\r\n    console.error(`${this.constructor.name} Exception`, err);\r\n    return of(false);\r\n  }\r\n\r\n  private _postQuery(res: RAW): Array<RES> {\r\n    const hasErrors = this.hasErrors;\r\n    const data = !hasErrors ? this.rawResult(res) : [];\r\n\r\n    this._logger.debug(\r\n      responseSuccess(data),\r\n      responseError(this.getErrors),\r\n      !hasErrors\r\n    );\r\n\r\n    this._empty = !data || !data.length;\r\n\r\n    if (!hasErrors && this._empty) {\r\n      this._outputMsg = this._emptyMessage();\r\n    }\r\n\r\n    if (!this._skip) {\r\n      this._data = data;\r\n      this._data$.next(data);\r\n    }\r\n\r\n    this._loaded = !hasErrors;\r\n    this._loading = false;\r\n    this._skip = false;\r\n    this._change$.next({});\r\n\r\n    return data;\r\n  }\r\n\r\n  private _emptyMessage() {\r\n    if (this.intl?.emptyMsg) {\r\n      if (typeof this.intl.emptyMsg === 'function') {\r\n        return this.intl.emptyMsg(this.args);\r\n      } else {\r\n        return this.intl.emptyMsg;\r\n      }\r\n    }\r\n    if (this._config.emptyMsg) {\r\n      if (typeof this._config.emptyMsg === 'function') {\r\n        return this._config.emptyMsg(this.args);\r\n      } else {\r\n        return this._config.emptyMsg;\r\n      }\r\n    }\r\n    return emptyMsg();\r\n  }\r\n\r\n  /**\r\n   * Data API\r\n   */\r\n\r\n  connect() {\r\n    return this._streams.connect().pipe(\r\n      takeUntil(this._disconnect$),\r\n      throttleTime(10),\r\n      tap(() => this._triggered++),\r\n      skipWhile(() => this._blockStart()),\r\n      map((args) => this._getArgs(args)),\r\n      map((req) => this.reqArguments(req)),\r\n      distinctUntilChanged(this._isEqual()),\r\n      tap(() => this._preQuery()),\r\n      switchMap((req) => this._execQuery(req)),\r\n      takeUntil(this._disconnect$),\r\n      filter((raw) => this.rawFilter(raw)),\r\n      tap((raw) => this._updateTotal(raw)),\r\n      catchError((err) => this._processException(err)),\r\n      map((raw) => this._postQuery(raw))\r\n    ) as Observable<RES[]>;\r\n  }\r\n\r\n  disconnect() {\r\n    this._trigger$.complete();\r\n    this._change$.complete();\r\n    this._disconnect$.next();\r\n    this._disconnect$.complete();\r\n  }\r\n}\r\n","import { PageEvent } from '@angular/material/paginator';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { pipe } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\n\r\n/**\r\n * Premade Mappers\r\n */\r\n\r\nexport function mapPaginator(pageSize: number) {\r\n  return pipe(\r\n    map((page: PageEvent) => ({\r\n      pageIndex: page.pageIndex,\r\n      pageSize: page.pageSize,\r\n    })),\r\n    startWith({\r\n      pageIndex: 0,\r\n      pageSize,\r\n    })\r\n  );\r\n}\r\n\r\nexport function mapSort() {\r\n  return pipe(\r\n    map((sort: Sort) => ({\r\n      orderBy: sort.active,\r\n      orderDir: sort.direction || undefined,\r\n    })),\r\n    startWith({})\r\n  );\r\n}\r\n","import { MatPaginator, PageEvent } from '@angular/material/paginator';\r\nimport { MatSort, Sort } from '@angular/material/sort';\r\nimport { Observable, UnaryFunction } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { MatDataSource } from './datasource';\r\nimport { mapPaginator, mapSort } from './mappers';\r\nimport { nonNumeric, setValue } from './messages';\r\nimport { DataSourceItem } from './types';\r\n\r\nexport abstract class ReactiveDataSource<REQ, RAW, RES> extends MatDataSource<\r\n  REQ,\r\n  RAW,\r\n  RES\r\n> {\r\n  /**\r\n   * Pagination Settings\r\n   */\r\n  get pageIndex() {\r\n    return this._pageIndex;\r\n  }\r\n  set pageIndex(size: number) {\r\n    this._logger.check(isNaN(Number(size)), nonNumeric('pageIndex'));\r\n    this._logger.print(setValue('PageIndex'), Number(size));\r\n    this._pageIndex = Number(size);\r\n  }\r\n  private _pageIndex = 0;\r\n\r\n  get pageSize() {\r\n    return this._pageSize;\r\n  }\r\n  set pageSize(size: number) {\r\n    if (size) {\r\n      this._logger.check(isNaN(Number(size)), nonNumeric('pageSize'));\r\n      this._logger.print(setValue('PageSize'), Number(size));\r\n      this._pageSize = Number(size);\r\n    }\r\n  }\r\n  private _pageSize = 10;\r\n\r\n  // be sure the paginator's view has been initialized\r\n  setPaginator(\r\n    paginator: MatPaginator,\r\n    mapper?: (\r\n      pageSize: number\r\n    ) => UnaryFunction<Observable<PageEvent>, Observable<any>>\r\n  ) {\r\n    this.addStream({\r\n      name: 'MatPaginator',\r\n      stream: paginator.page.pipe<any>(\r\n        mapper ? mapper(this.pageSize) : mapPaginator(this.pageSize)\r\n      ),\r\n    });\r\n  }\r\n\r\n  // sort changes emitted will trigger an update\r\n  setSort(\r\n    sort: MatSort,\r\n    mapper?: () => UnaryFunction<Observable<Sort>, Observable<any>>\r\n  ) {\r\n    this.addStream({\r\n      name: 'MatSort',\r\n      stream: sort.sortChange.pipe<any>(mapper ? mapper() : mapSort()),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Attachs an autocompleter with this data source filtered. Note that\r\n   * the stream provided will be accessed during change detection and should not directly change\r\n   * values that are bound in template views.\r\n   * @returns Observable that emits a new value when the data changes.\r\n   */\r\n  attach(): Observable<Array<DataSourceItem>> {\r\n    return this.connect().pipe(map((res) => this.resFilter(res)));\r\n  }\r\n\r\n  // customized filter trigger\r\n  abstract filter(query: string, limit: number): void;\r\n\r\n  // customized result mapper\r\n  abstract resFilter(result: Array<RES>): Array<DataSourceItem>;\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["stringify"],"mappings":"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"}