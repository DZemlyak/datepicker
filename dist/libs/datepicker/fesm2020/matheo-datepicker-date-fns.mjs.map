{"version":3,"file":"matheo-datepicker-date-fns.mjs","sources":["../../../../libs/datepicker/date-fns/date-fns-locales.ts","../../../../libs/datepicker/date-fns/date-fns-adapter.ts","../../../../libs/datepicker/date-fns/date-fns-formats.ts","../../../../libs/datepicker/date-fns/index.ts","../../../../libs/datepicker/date-fns/matheo-datepicker-date-fns.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\nimport { Locale } from 'date-fns';\r\n\r\nexport const MAT_DATE_FNS_LOCALES = new InjectionToken<Locale[]>(\r\n  'MAT_DATE_FNS_LOCALES'\r\n);\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Inject, Injectable, Optional, InjectionToken } from '@angular/core';\r\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\r\nimport { DateAdapter } from '@matheo/datepicker/core';\r\nimport {\r\n  addDays,\r\n  addMonths,\r\n  addYears,\r\n  format,\r\n  getDate,\r\n  getDay,\r\n  getDaysInMonth,\r\n  getMonth,\r\n  getYear,\r\n  Locale,\r\n  parse,\r\n  parseISO,\r\n  setDay,\r\n  setMonth,\r\n  toDate,\r\n  parseJSON,\r\n  getHours,\r\n  getMinutes,\r\n  getMilliseconds,\r\n  setMinutes,\r\n  getSeconds,\r\n  setSeconds,\r\n  setHours,\r\n  addHours,\r\n  addMinutes,\r\n  addSeconds,\r\n} from 'date-fns';\r\nimport { zonedTimeToUtc } from 'date-fns-tz/esm';\r\nimport { enUS } from 'date-fns/esm/locale';\r\nimport { MAT_DATE_FNS_LOCALES } from './date-fns-locales';\r\n\r\nconst UTC_TIMEZONE = 'UTC';\r\n\r\n/** Configurable options for {@see DateFnsAdapter}. */\r\nexport interface MatDateFnsAdapterOptions {\r\n  /**\r\n   * Turns the use of utc dates on or off.\r\n   * Changing this will change how Angular Material components like DatePicker output dates.\r\n   * {@default false}\r\n   */\r\n  useUtc: boolean;\r\n}\r\n\r\n/** InjectionToken for DateFnsAdapter to configure options. */\r\nexport const MAT_DATE_FNS_ADAPTER_OPTIONS = new InjectionToken<MatDateFnsAdapterOptions>(\r\n  'MAT_DATE_FNS_ADAPTER_OPTIONS',\r\n  {\r\n    providedIn: 'root',\r\n    factory: MAT_DATE_FNS_ADAPTER_OPTIONS_FACTORY,\r\n  }\r\n);\r\n\r\n/** @docs-private */\r\nexport function MAT_DATE_FNS_ADAPTER_OPTIONS_FACTORY(): MatDateFnsAdapterOptions {\r\n  return {\r\n    useUtc: false,\r\n  };\r\n}\r\n\r\n/** Creates an array of numbers. */\r\nfunction range(start: number, end: number): number[] {\r\n  const arr: number[] = [];\r\n  for (let i = start; i <= end; i++) {\r\n    arr.push(i);\r\n  }\r\n  return arr;\r\n}\r\n\r\n/** Adapts date-fns Dates for use with Angular Material. */\r\n@Injectable()\r\nexport class DateFnsAdapter extends DateAdapter<Date> {\r\n  private _dateFnsLocale: Locale;\r\n\r\n  constructor(\r\n    @Optional() @Inject(MAT_DATE_LOCALE) dateLocale: string,\r\n    @Inject(MAT_DATE_FNS_LOCALES) private locales: Locale[],\r\n    @Optional()\r\n    @Inject(MAT_DATE_FNS_ADAPTER_OPTIONS)\r\n    private options?: MatDateFnsAdapterOptions\r\n  ) {\r\n    super();\r\n\r\n    try {\r\n      this.setLocale(dateLocale || enUS);\r\n    } catch (err) {\r\n      this.setLocale(enUS);\r\n    }\r\n  }\r\n\r\n  setLocale(locale: string | Locale) {\r\n    if (!locale) {\r\n      throw new Error(\r\n        'setLocale should be called with the string locale code or date-fns Locale object'\r\n      );\r\n    }\r\n    this._dateFnsLocale = this.getLocale(locale);\r\n    super.setLocale(locale);\r\n  }\r\n\r\n  private getLocale = (localeCodeOrLocale: string | Locale): Locale => {\r\n    if (localeCodeOrLocale && (localeCodeOrLocale as Locale).code) {\r\n      return localeCodeOrLocale as Locale;\r\n    }\r\n    if (!this.locales || !this.locales.length) {\r\n      throw new Error('locales array does not provided or is empty');\r\n    }\r\n    const locale = this.locales.find(\r\n      (item) => item.code === localeCodeOrLocale\r\n    );\r\n    if (!locale) {\r\n      throw new Error(`locale '${localeCodeOrLocale}' does not exist`);\r\n    }\r\n    return locale;\r\n  };\r\n\r\n  getYear(date: Date): number {\r\n    return getYear(date);\r\n  }\r\n\r\n  getMonth(date: Date): number {\r\n    return getMonth(date);\r\n  }\r\n\r\n  getDate(date: Date): number {\r\n    return getDate(date);\r\n  }\r\n\r\n  getHours(date: Date): number {\r\n    return getHours(date);\r\n  }\r\n\r\n  setHours(date: Date, hours: number): Date {\r\n    return setHours(date, hours);\r\n  }\r\n\r\n  getMinutes(date: Date): number {\r\n    return getMinutes(date);\r\n  }\r\n\r\n  setMinutes(date: Date, minutes: number): Date {\r\n    return setMinutes(date, minutes);\r\n  }\r\n\r\n  getSeconds(date: Date): number {\r\n    return getSeconds(date);\r\n  }\r\n\r\n  setSeconds(date: Date, seconds: number, ms?: number): Date {\r\n    return setSeconds(date, seconds);\r\n  }\r\n\r\n  getMilliseconds(date: Date): number {\r\n    return getMilliseconds(date);\r\n  }\r\n\r\n  getDayOfWeek(date: Date): number {\r\n    return getDay(date);\r\n  }\r\n\r\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    const map = {\r\n      long: 'LLLL',\r\n      short: 'LLL',\r\n      narrow: 'LLLLL',\r\n    };\r\n\r\n    const formatStr = map[style];\r\n    const date = new Date();\r\n\r\n    return range(0, 11).map((month) =>\r\n      format(setMonth(date, month), formatStr, {\r\n        locale: this._dateFnsLocale,\r\n      })\r\n    );\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    return range(1, 31).map((day) => String(day));\r\n  }\r\n\r\n  getHourNames(): string[] {\r\n    return range(0, 23).map((i) => (i === 0 ? '00' : String(i)));\r\n  }\r\n\r\n  getMinuteNames(): string[] {\r\n    return range(0, 59).map(String);\r\n  }\r\n\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    const map = {\r\n      long: 'EEEE',\r\n      short: 'EEE',\r\n      narrow: 'EEEEE',\r\n    };\r\n\r\n    const formatStr = map[style];\r\n    const date = new Date();\r\n\r\n    return range(0, 6).map((month) =>\r\n      format(setDay(date, month), formatStr, {\r\n        locale: this._dateFnsLocale,\r\n      })\r\n    );\r\n  }\r\n\r\n  getYearName(date: Date): string {\r\n    return format(date, 'yyyy', {\r\n      locale: this._dateFnsLocale,\r\n    });\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    return this._dateFnsLocale.options.weekStartsOn;\r\n  }\r\n\r\n  getNumDaysInMonth(date: Date): number {\r\n    return getDaysInMonth(date);\r\n  }\r\n\r\n  clone(date: Date): Date {\r\n    return toDate(date);\r\n  }\r\n\r\n  createDate(\r\n    year: number,\r\n    month: number,\r\n    date: number,\r\n    hours: number = 0,\r\n    minutes: number = 0,\r\n    seconds: number = 0,\r\n    ms: number = 0\r\n  ): Date {\r\n    if (month < 0 || month > 11) {\r\n      throw Error(\r\n        `Invalid month index \"${month}\". Month index has to be between 0 and 11.`\r\n      );\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    const result = this._createDateWithOverflow(\r\n      year,\r\n      month,\r\n      date,\r\n      hours,\r\n      minutes,\r\n      seconds,\r\n      ms\r\n    );\r\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n    if (result.getMonth() !== month) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  today(): Date {\r\n    return new Date();\r\n  }\r\n\r\n  parse(value: any, parseFormat: any): Date | null {\r\n    if (value) {\r\n      if (typeof value === 'string') {\r\n        if (this.options.useUtc) {\r\n          const d = parse(value.trim(), parseFormat, new Date(), {\r\n            locale: this._dateFnsLocale,\r\n          });\r\n          return zonedTimeToUtc(d, UTC_TIMEZONE);\r\n        }\r\n        return parse(value.trim(), parseFormat, new Date(), {\r\n          locale: this._dateFnsLocale,\r\n        });\r\n      }\r\n      if (typeof value === 'number') {\r\n        return toDate(value);\r\n      }\r\n      if (value instanceof Date) {\r\n        return this.clone(value as Date);\r\n      }\r\n      return null;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  format(date: Date, displayFormat: string): string {\r\n    return format(date, displayFormat, { locale: this._dateFnsLocale });\r\n  }\r\n\r\n  addCalendarYears(date: Date, years: number): Date {\r\n    return addYears(date, years);\r\n  }\r\n\r\n  addCalendarMonths(date: Date, months: number): Date {\r\n    return addMonths(date, months);\r\n  }\r\n\r\n  addCalendarDays(date: Date, days: number): Date {\r\n    return addDays(date, days);\r\n  }\r\n\r\n  addCalendarHours(date: Date, hours: number): Date {\r\n    return addHours(date, hours);\r\n  }\r\n\r\n  addCalendarMinutes(date: Date, minutes: number): Date {\r\n    return addMinutes(date, minutes);\r\n  }\r\n\r\n  addCalendarSeconds(date: Date, seconds: number, ms?: number): Date {\r\n    return addSeconds(date, seconds);\r\n  }\r\n\r\n  toIso8601(date: Date): string {\r\n    return date.toISOString();\r\n  }\r\n\r\n  deserialize(value: any): Date | null {\r\n    if (value) {\r\n      if (typeof value === 'string') {\r\n        if (this.options.useUtc) {\r\n          return parseJSON(value);\r\n        }\r\n        return parseISO(value);\r\n      }\r\n      if (typeof value === 'number') {\r\n        return toDate(value);\r\n      }\r\n      if (value instanceof Date) {\r\n        return this.clone(value as Date);\r\n      }\r\n      return null;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  isDateInstance(obj: any): boolean {\r\n    return obj instanceof Date;\r\n  }\r\n\r\n  isValid(date: Date): boolean {\r\n    return date instanceof Date && !isNaN(date.getTime());\r\n  }\r\n\r\n  invalid(): Date {\r\n    return new Date(NaN);\r\n  }\r\n\r\n  /** Creates a date but allows the month and date to overflow. */\r\n  private _createDateWithOverflow(\r\n    year: number,\r\n    month: number,\r\n    date: number,\r\n    hours: number = 0,\r\n    minutes: number = 0,\r\n    seconds: number = 0,\r\n    ms: number = 0\r\n  ): Date {\r\n    const result = this._createDateInternal(\r\n      year,\r\n      month,\r\n      date,\r\n      hours,\r\n      minutes,\r\n      seconds,\r\n      ms\r\n    );\r\n\r\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\r\n    // abbreviations for 19xx.\r\n    if (year >= 0 && year < 100) {\r\n      result.setFullYear(this.getYear(result) - 1900);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private _createDateInternal(\r\n    year: number,\r\n    month: number,\r\n    date: number,\r\n    hours?: number,\r\n    minutes?: number,\r\n    seconds?: number,\r\n    ms?: number\r\n  ): Date {\r\n    if (this.options.useUtc) {\r\n      return zonedTimeToUtc(\r\n        new Date(year, month, date, hours, minutes, seconds, ms),\r\n        UTC_TIMEZONE\r\n      );\r\n    }\r\n    return new Date(year, month, date, hours, minutes, seconds, ms);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { MatDateFormats } from '@matheo/datepicker/core';\r\n\r\n// https://date-fns.org/v2.21.3/docs/format\r\n\r\nexport const MAT_DATE_FNS_FORMATS: MatDateFormats = {\r\n  parse: {\r\n    dateInput: 'P',\r\n    datetimeInput: 'f',\r\n    timeInput: 'H:mm',\r\n    monthInput: 'MMM',\r\n    yearInput: 'yyyy',\r\n  },\r\n  display: {\r\n    dateInput: 'P',\r\n    datetimeInput: 'Pp',\r\n    timeInput: 'p',\r\n    monthInput: 'MMM yyyy',\r\n    yearInput: 'yyyy',\r\n    dateA11yLabel: 'PP',\r\n    monthLabel: 'MMM',\r\n    monthDayLabel: 'MMM d',\r\n    monthDayA11yLabel: 'MMMM d',\r\n    monthYearLabel: 'MMM yyyy',\r\n    monthYearA11yLabel: 'MMMM yyyy',\r\n    timeLabel: 'p',\r\n  },\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport {\r\n  DateAdapter as MaterialDateAdapter,\r\n  MAT_DATE_FORMATS,\r\n  MAT_DATE_LOCALE,\r\n} from '@angular/material/core';\r\nimport { DateAdapter } from '@matheo/datepicker/core';\r\nimport {\r\n  MAT_DATE_FNS_ADAPTER_OPTIONS,\r\n  DateFnsAdapter,\r\n} from './date-fns-adapter';\r\nimport { MAT_DATE_FNS_FORMATS } from './date-fns-formats';\r\nimport { MAT_DATE_FNS_LOCALES } from './date-fns-locales';\r\n\r\nexport * from './date-fns-adapter';\r\nexport * from './date-fns-formats';\r\nexport * from './date-fns-locales';\r\n\r\n@NgModule({\r\n  providers: [\r\n    {\r\n      provide: DateAdapter,\r\n      useClass: DateFnsAdapter,\r\n      deps: [MAT_DATE_LOCALE, MAT_DATE_FNS_LOCALES, MAT_DATE_FNS_ADAPTER_OPTIONS],\r\n    },\r\n    {\r\n      provide: MaterialDateAdapter,\r\n      useClass: DateFnsAdapter,\r\n      deps: [MAT_DATE_LOCALE, MAT_DATE_FNS_LOCALES, MAT_DATE_FNS_ADAPTER_OPTIONS],\r\n    },\r\n  ],\r\n})\r\nexport class DateFnsModule {}\r\n\r\n@NgModule({\r\n  imports: [DateFnsModule],\r\n  providers: [\r\n    { provide: MAT_DATE_FORMATS, useValue: MAT_DATE_FNS_FORMATS },\r\n    { provide: MAT_DATE_FNS_LOCALES, useValue: [] },\r\n  ],\r\n})\r\nexport class MatDateFnsModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["MaterialDateAdapter"],"mappings":"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"}